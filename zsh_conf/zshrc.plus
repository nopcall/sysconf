# {{{ 关于历史纪录的配置
export HISTSIZE=10000
export SAVEHIST=10000
export HISTFILE=~/.zhistory
setopt INC_APPEND_HISTORY
setopt HIST_IGNORE_DUPS								# only save one of duplicate iterms
setopt EXTENDED_HISTORY								# add time-stamp for commands
setopt AUTO_PUSHD								# cd with hitorical directory
setopt PUSHD_IGNORE_DUPS

# # {{{ 每个目录使用独立的历史纪录
# HISTDIR="$HOME/.zhistory"
# [[ ! -d "$HISTDIR" ]] && mkdir -p "$HISTDIR"
# HISTFILE="$HISTDIR/${PWD//\//:}"
# chpwd() {
# #   fc -W                                       # write current history  file
# #   "setopt INC_APPEND_HISTORY"
#     HISTFILE="$HISTDIR/${PWD//\//:}"            # set new history file
#     [[ ! -e "$HISTFILE" ]] && touch $HISTFILE
#     local ohistsize=$HISTSIZE
#         HISTSIZE=0                              # Discard previous dir's history
#         HISTSIZE=$ohistsize                     # Prepare for new dir's history
#     fc -R                                       # read from current histfile
# }

# function allhistory { cat $HISTDIR/* }                                   #*/
# function convhistory {
#             sort $1 | sed 's/^:\([ 0-9]*\):[0-9]*;\(.*\)/\1::::::\2/' |
#             awk -F"::::::" '{ $1=strftime("%Y-%m-%d %T",$1) "|"; print }'
# }

# #使用 histall 命令查看全部历史纪录
# function histall { convhistory =(allhistory) |
#             sed '/^.\{20\} *cd/i\\' }
# #使用 hist 查看当前目录历史纪录
# function hist { convhistory $HISTFILE }

# #全部历史纪录 top55
# function top55 { allhistory | awk -F':[ 0-9]*:[0-9]*;' '{ $1="" ; print }' |	\
#     sed 's/ /\n/g' | sed '/^$/d' | sort | uniq -c | sort -nr | head -n 55 }
# # }}}

# 以下字符视为单词的一部分
#WORDCHARS='*?_-[]~=&;!#$%^(){}<>'
WORDCHARS='*?[]~=&;!#$%^(){}<>'
# }}}

# {{{ 自动补全功能
setopt AUTO_LIST
setopt AUTO_MENU
#setopt MENU_COMPLETE								# auto select the first iterm of candidates

autoload -U compinit
compinit

# auto complete cache
zstyle ':completion::complete:*' use-cache on
zstyle ':completion::complete:*' cache-path .zcache
zstyle ':completion:*:cd:*' ignore-parents parent pwd

# auto complete candidate
zstyle ':completion:*' verbose yes
zstyle ':completion:*' menu select
zstyle ':completion:*:*:default' force-list always
zstyle ':completion:*' select-prompt '%SSelect:  lines: %L  matches: %M  [%p]'
zstyle ':completion:*:match:*' original only
zstyle ':completion::prefix-1:*' completer _complete
zstyle ':completion:predict:*' completer _complete
zstyle ':completion:incremental:*' completer _complete _correct
zstyle ':completion:*' completer _complete _prefix _correct _prefix _match _approximate

# complete path
zstyle ':completion:*' expand 'yes'
zstyle ':completion:*' squeeze-slashes 'yes'
zstyle ':completion::complete:*' '\\'

# colofull menu *not* work with MAC
if [ `uname` != 'Darwin' ]; then
    eval $(dircolors -b)
    export ZLSCOLORS="${LS_COLORS}"
    zmodload zsh/complist
    zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
    zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
fi

# 修正大小写
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}'
# 错误校正
zstyle ':completion:*' completer _complete _match _approximate
zstyle ':completion:*:match:*' original only
zstyle ':completion:*:approximate:*' max-errors 1 numeric

# kill 命令补全
compdef pkill=killall
zstyle ':completion:*:*:kill:*' menu yes select
zstyle ':completion:*:*:*:*:processes' force-list always
zstyle ':completion:*:processes' command 'ps -au$USER'

# category candidate with group
zstyle ':completion:*:matches' group 'yes'
zstyle ':completion:*' group-name ''
zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*:options' auto-description '%d'
zstyle ':completion:*:descriptions' format $'\e[01;33m -- %d --\e[0m'
zstyle ':completion:*:messages' format $'\e[01;35m -- %d --\e[0m'
zstyle ':completion:*:warnings' format $'\e[01;31m -- No Matches Found --\e[0m'
zstyle ':completion:*:corrections' format $'\e[01;32m -- %d (errors: %e) --\e[0m'

# cd ~ 补全顺序
zstyle ':completion:*:-tilde-:*' group-order 'named-directories' 'path-directories' 'users' 'expand'
# }}}

## {{{ 行编辑高亮模式
# Ctrl+@ 设置标记，标记和光标点之间为 region
zle_highlight=(region:bg=magenta #选中区域
         special:bold      #特殊字符
         isearch:underline)#搜索时使用的关键字
# }}}

## {{{ 空行(光标在行首)补全 "cd "
user-complete(){
    case $BUFFER in
  "" )                       # 空行填入 "cd "
      BUFFER="cd "
      zle end-of-line
      zle expand-or-complete
      ;;
  "cd  " )                   # TAB + 空格 替换为 "cd ~"
      BUFFER="cd ~"
      zle end-of-line
      zle expand-or-complete
      ;;
  " " )
      BUFFER="!?"
      zle end-of-line
      ;;
  "cd --" )                  # "cd --" 替换为 "cd +"
      BUFFER="cd +"
      zle end-of-line
      zle expand-or-complete
      ;;
  "cd +-" )                  # "cd +-" 替换为 "cd -"
      BUFFER="cd -"
      zle end-of-line
      zle expand-or-complete
      ;;
  * )
      zle expand-or-complete
      ;;
    esac
}
zle -N user-complete
bindkey "\t" user-complete

# 显示 path-directories ,避免候选项唯一时直接选中
cdpath="$HOME"
# }}}

# {{{
zshaddhistory() {
    cmd=${1%%$'\n'}
    print -sr -- $cmd
    LASTCMD="${(pj:\\\n:)${(f)1}}"
    first_arg=${${(z)LASTCMD}[1]}
    ( [[ `id -u $USER` -eq 0 ]] || [[ $first_arg == sudo ]] ) && logger -t "$USER@${TTY/\/dev\/}[$PWD]" $LASTCMD
}
# }}}

# {{{
magic-enter() {
    if [[ -z $BUFFER ]]
    then
        zle clear-screen
    else
        zle accept-line
    fi
}

zle -N magic-enter
bindkey "^M" magic-enter
# }}}

# {{{ pinyin change dir
zstyle ':completion:*' user-expand _pinyin
function _pinyin() { reply=($($HOME/bin/chsdir 0 $*)) }
# }}}

# {{{ 设置参数
setopt complete_aliases         #do not expand aliases _before_ completion has finished
setopt auto_cd                  # if not a command, try to cd to it.
setopt auto_pushd               # automatically pushd directories on dirstack
setopt auto_continue            #automatically send SIGCON to disowned jobs
setopt extended_glob            # so that patterns like ^() *~() ()# can be used
setopt pushd_ignore_dups        # do not push dups on stack
setopt pushd_silent             # be quiet about pushds and popds
setopt brace_ccl                # expand alphabetic brace expressions
setopt chase_links             # ~/ln -> /; cd ln; pwd -> /
setopt complete_in_word         # stays where it is and completion is done from both ends
setopt correct                  # spell check for commands only
setopt equals extended_glob    # use extra globbing operators
setopt no_hist_beep             # don not beep on history expansion errors
setopt hash_list_all            # search all paths before command completion
setopt hist_ignore_all_dups     # when runing a command several times, only store one
setopt hist_reduce_blanks       # reduce whitespace in history
setopt hist_ignore_space        # do not remember commands starting with space
setopt share_history            # share history among sessions
setopt hist_verify              # reload full command when runing from history
setopt hist_expire_dups_first   #remove dups when max size reached
setopt interactive_comments     # comments in history
setopt list_types               # show ls -F style marks in file completion
setopt long_list_jobs           # show pid in bg job list
setopt numeric_glob_sort        # when globbing numbered files, use real counting
setopt inc_append_history       # append to history once executed
setopt prompt_subst             # prompt more dynamic, allow function in prompt
setopt nonomatch
# }}}

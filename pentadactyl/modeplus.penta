"{{{ Mode Plus Start---------------------------------------------------------}}}
"{{ try to guess if param of :open is a url, and add buffer to :open/tabopen complition
js <<EOF
let isURL = function (url) {
    if (typeof url !== 'string')
        return false;
    if (url.indexOf('google ') === 0)
        return false;
    if (url.indexOf('~/') === 0)
        return true;
    let m = url.match(/^(?:[^.:\/ ]+\.)+([A-Za-z]+)($|\/)/);
    return (!m || m[1].match(/^(?:com|net|tv|org|name|edu|gov|au|tw|cz|cn|cc|us|me|info|co|jp|ly|gd|gl|de|tk|fm|io)$/));
};
overlay.overlayObject(dactyl, {
    open: function open(urls, params, force) {
        if (typeof urls === 'string') {
            let matches = urls.match(/^(\d+): /);
            if (matches) {
                tabs.switchTo(urls, true);
                return;
            }
        }
        if (!isURL(urls)) {
            arguments[0] = options['defsearch'] + ' ' + arguments[0];
        }
        open.superapply(this, arguments);
    }
});
completion.addUrlCompleter('buffer', 'Open Tabs', completion.buffer);
options["complete"].splice(0, 0, 'buffer');
EOF
"}}

"{{ jump to a command, mapping or option source definition, from https://gist.github.com/3331062
command jumptodef,jd -literal=1 -nargs=1 -complete help -js <<EOF
let sourceLocation = function(str) {
    let mapping = function(s) {
        let [, mc, key] = /(?:(.)_)?(.*)/.exec(s);
        return mappings.get(mc ? modes.modeChars[mc] : modes.NORMAL, key) ||
            dactyl.echoerr("Bad bad: " + s);
    };
    if (isArray(str))
        str = str[0];
    let frame = ((str[0] === ":") ? commands.get(str.substr(1)) :
        /'.*?'/.test(str) ? options.get(str.slice(1,-1)) :
        mapping(str)).definedAt;
    return { url: util.fixURI(frame.filename), line: frame.lineNumber };
};
//buffer.viewSource(sourceLocation(args[0]));
let loc = sourceLocation(args[0]);
window.openDialog("chrome://global/content/viewSource.xul",
    "_blank", "all,dialog=no",
    loc.url, null, null, loc.line);
EOF
"}}

"{{ change EX mode prompt
js <<EOF
overlay.overlayObject(modes, {
    _getModeMessage: function _getModeMessage() {
        return _getModeMessage.superapply(this, arguments).replace(/^-- EX --/, 'âžœ ');
    }
});
EOF
"}}

"{{ Manage proxy.pac
command! reloadPAC,rp -js Components.classes['@mozilla.org/network/protocol-proxy-service;1'].getService().reloadPAC();
js <<EOF
group.commands.add(["pac"],
    "Add domain to proxy.pac",
    function (args) {
        function addDomain(pac, domain) {
            pac = pac.replace('//MARK1', '|| dnsDomainIs(host, "' + domain + "\")\n        //MARK1");
            return pac.replace('//MARK2', '|| dnsDomainIs(host, ".' + domain + "\")\n    //MARK2");
        }
        let hostname = args.length ? args : util.subdomains(window.content.location.hostname)[0];
        let pacfile = io.File(IO.runtimePath + '/proxy.pac');
        let pac = pacfile.read();
        pac = addDomain(pac, hostname);
        pacfile.write(pac);
        Components.classes['@mozilla.org/network/protocol-proxy-service;1'].getService().reloadPAC();
    }, {
        argCount: "?",
        completer: function (context) {
            modules.completion.visibleHosts(context);
        },
    }, true);
EOF
" }}}

"{{  source boostrap if modified
command bootstrap :runtime bootstrap
js <<EOF
let bootstrapFile = 'bootstrap.penta';
let bootstrapPref = 'extensions.dactyl.bootstrapTime';
let file = io.File(IO.runtimePath + '/' + bootstrapFile);
if (file.exists() && file.isFile() && file.isReadable()) {
    let mtime = Math.floor(file.lastModifiedTime / 1000);
    let btime = prefs.get(bootstrapPref);
    if (!btime || mtime > btime) {
        dactyl.execute('runtime ' + bootstrapFile);
        prefs.set(bootstrapPref, Math.floor(Date.now() / 1000));
    }
}
EOF
"}}

"{{{ Mode Plus Ends----------------------------------------------------------}}}
